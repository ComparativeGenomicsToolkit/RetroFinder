#align human mrnas to hg18 using lastz
DB=hg18
GBDB=hg

mkdir -p /hive/data/genomes/$DB/bed/mrnaBlastz/
cd /hive/data/genomes/$DB/bed/mrnaBlastz/

#pull latest mrna and refseq from genbank 
/cluster/data/genbank/bin/x86_64/gbGetSeqs -db=$GBDB -inclVersion -native -gbRoot=/cluster/data/genbank \
   genbank mrna stdout | tr acgt ACGT > mrna.fa 
/cluster/data/genbank/bin/x86_64/gbGetSeqs -db=$GBDB -inclVersion -native -gbRoot=/cluster/data/genbank \
   refSeq mrna stdout | tr acgt ACGT > refseq.fa 
cat mrna.fa refseq.fa > raw.fa

#remmove polyA tail before aligning
faTrimPolyA raw.fa trim.fa 
mkdir -p /san/sanvol1/scratch/mrnaBlastz/$DB
cp -p trim.fa /san/sanvol1/scratch/mrnaBlastz/$DB
faToTwoBit raw.fa mrna.2bit
twoBitToFa mrna.2bit stdout |faToTwoBit stdin -stripVersion mrnaNoversion.2bit
faSize trim.fa -detailed > trim.len
cp /hive/data/genomes/$DB/chrom.sizes S1.len
cp trim.len S2.len
faSize raw.fa -detailed > raw.len
sort raw.len > x
mv x raw.len
sort trim.len > x
mv x trim.len
join raw.len trim.len  > both.len
awk '{print 0,$1,$3,$1,$2}' both.len >  mrna.lft
cp -p mrna.lft /san/sanvol1/scratch/mrnaBlastz/$DB
cp -p S1.len /san/sanvol1/scratch/mrnaBlastz/$DB
cp -p S2.len /san/sanvol1/scratch/mrnaBlastz/$DB
cp -p raw.len /san/sanvol1/scratch/mrnaBlastz/$DB


# create temp work area for cluster run
mkdir -p /san/sanvol1/scratch/mrnaBlastz/$DB/split
mkdir -p /san/sanvol1/scratch/mrnaBlastz/$DB/lastz/
mkdir -p /san/sanvol1/scratch/mrnaBlastz/$DB/run.0
faSplit about trim.fa 1000000 /san/sanvol1/scratch/mrnaBlastz/$DB/split/mrna

cd /san/sanvol1/scratch/mrnaBlastz/$DB/split
ls mrna*.fa |awk '{print "/san/sanvol1/scratch/mrnaBlastz/'$DB'/split/"$1}' > /san/sanvol1/scratch/mrnaBlastz/$DB/S2.lst

cd ..
echo "#\!/bin/bash -fe" > doChain
echo "BASE=/san/sanvol1/scratch/mrnaBlastz/$DB" >> doChain
echo "axtChain -linearGap=loose -psl \$BASE/pslFilter/\$1.psl /scratch/data/$DB/$DB.2bit -faQ \$BASE/trim.fa stdout | chainFilter -minScore=4000 stdin | chainToPsl stdin S1.len S2.len nib.lst trim.fa psl/\$1.psl" >> doChain
chmod +x doChain
awk '{print "mkdir -p /san/sanvol1/scratch/mrnaBlastz/$DB/lastz/"$1}' S1.len |grep -v random > create.dirs
source create.dirs
grep -v "random" /scratch/data/$DB/chrom.sizes  |cut -f 1 > S1.lst
cd /san/sanvol1/scratch/mrnaBlastz/$DB/run.0

#cluster job to run lastz to align mRNAs to genome
echo "#LOOP" > template
echo "/cluster/home/baertsch/baertsch/scripts/lastz.sh /scratch/data/$DB/$DB.2bit/\$(path1) \$(path2) 10 62 {check out line+ /san/sanvol1/scratch/mrnaBlastz/$DB/lastz/\$(root1)/\$(root2).psl} /san/sanvol1/scratch/mrnaBlastz/$DB/S1.len /san/sanvol1/scratch/mrnaBlastz/$DB/S2.len" >> template
echo "#ENDLOOP" >> template

cp ../S1.lst .
cp ../S2.lst .
gensub2 S1.lst S2.lst template jobList
ssh -T pk "cd /san/sanvol1/scratch/mrnaBlastz/$DB/run.0 ; para make jobList"
#    para create jobList
#    para try
#    para check
#    para push
#    para check
#Checking finished jobs
# some jobs failed due to lack of alignments on a hap chromsome, this is ok

#run ~/baertsch/scripts/lastzPostProcess.sh
# or run commands below

#concatenate, sort (by name, score) and de-dup psls by chrom

cd ..
mkdir pslFilter
for i in `awk '{print $1}' S1.len` ; do echo $i ; cat lastz/$i/*.psl | awk '{print $0, $1*3-$2}' | \
 sort -k 10,10 -k 22nr -T /scratch | awk '{OFS=" "; print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21}' | \
 pslFilterDups stdin pslFilter/$i.psl  ; done 

#chain blocks

mkdir -p psl
for i in `awk '{print $1}' S1.len` ; do nohup doChain $i ; done 

#convert chains to psl
ls /scratch/data/$DB/nib/*.nib > nib.lst
for i in `awk '{print $1}' S1.len`; do chainToPsl chainFilter/$i.chain S1.len S2.len nib.lst trim.fa psl/$i.psl; done


#reattach polyA tail and fix alignments
mkdir -p pslLift
for i in `awk '{print $1}' S1.len` ; do liftUp pslLift/$i.psl mrna.lft warn psl/$i.psl -pslQ -nohead ; done

cd /cluster/data/$DB/bed/mrnaBlastz
pslCat -nohead /san/sanvol1/scratch/mrnaBlastz/$DB/pslLift/*psl > mrnaBlastz.psl

sort -k10,10 -k14,14 -k16,16n -k12,12n mrnaBlastz.psl > mrnaBlastz.sort.psl
#pslCDnaFilter -minCover=0.05 -minId=0.65 mrnaBlastz.sort.psl mrnaBlastz.65.psl
##                       seqs    aligns
#             total:     223377  11187645
#     drop minIdent:     103075  6082119
#     drop minCover:     51568   457653
#              kept:     222565  4647873
#pslCDnaFilter -minCover=0.05 -minId=0.62 mrnaBlastz.sort.psl mrnaBlastz.psl
#                        seqs    aligns
#             total:     223377  11187645
#     drop minIdent:     74887   3622214
#     drop minCover:     52526   567156
#              kept:     223112  6998275

pslCDnaFilter -minCover=0.05 -minId=0.62 mrnaBlastz.sort.psl mrnaBlastz.5.psl
#                        seqs    aligns
#             total:     294866  32972742
#     drop minIdent:     129957  6029131
#     drop minCover:     85251   4029359
#              kept:     294811  22914252

pslCDnaFilter -minCover=0.10 -minId=0.62 mrnaBlastz.sort.psl.gz mrnaBlastz.psl
#                        seqs    aligns
#             total:     294866  32972742
#     drop minIdent:     129957  6029131
#     drop minCover:     145866  10996740
#              kept:     294778  15946871
#

#load mrna alignment track into browser
awk -f ~baertsch/bin/scripts/stripversion.awk mrnaBlastz.psl | hgLoadPsl $DB stdin -table=mrnaBlastz2
#rm -f mrnaBlastz.strip.psl 

#grep -v random mrnaBlastz.psl > mrnaBlastz.norand.psl

#awk '{print $10,$14,$9}' mrnaBlastz.psl| sort|  uniq -c > qName.count &
#nice awk '$1>1{print $0}' qName.count > qName.countDups 
#select.awk qName.countDups mrnaBlastz.psl > mrnaBlastz.dups.psl 
#awk -f missingChain.awk mrnaBlastz.dups.psl > mrnaBlastz.missing.psl

#split for pipeline cluster run 
mkdir -p /hive/users/baertsch/retro/$DB/split
pslSplit nohead /hive/users/baertsch/retro/$DB/split mrnaBlastz.psl -chunkSize=120
cd /hive/users/baertsch/retro/$DB/split
for i in `ls tmp*.psl` ; do ~baertsch/bin/scripts/pslQueryUniq $i > temp.psl ; mv temp.psl $i ;echo $i; done
grep chr tmp* | awk '{print $1,$10}' | awk -F":" '{print $1,$2}'|awk '{print $1,$3}'|uniq  > acc.lst

#load mrna sequences into browser (do we still need this if we have version numbers)
#cp mrna.fa /cluster/data/$DB/bed/mrnaBlastz/${DB}Mrna.fa
#ln /cluster/data/$DB/bed/mrnaBlastz/${DB}Mrna.fa /gbdb/$DB/mrnaBlastz/ -s
#hgLoadSeq $DB /gbdb/$DB/mrnaBlastz/${DB}Mrna.fa -prefix=bz

