#!/hive/groups/gencode/local/bin/python

from __future__ import with_statement

import sys, os, subprocess
import argparse
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from commonOps import *
from ParseConfig import ParseConfig

parser = argparse.ArgumentParser(description='Program to run lastz and pass the correct input parameters to the program, runs each set of mRNAs against one chromosome so small jobs are run on the cluster')
parser.add_argument('configFile', metavar='configFile', type=str, help='config file of variables global to the pipeline')
parser.add_argument('target', metavar='target', type=str, help='Path to target chromosome in genome 2 bit file')
parser.add_argument('query', metavar='query', type=str, help='Path to query file of mRNA sequences to align to genome')
parser.add_argument('outPsl', metavar='outPsl', type=str, help='Lastz alignment output in PSL format')
parser.add_argument('axtOutDir', metavar='axtOutDir', type=str, help='Lastz alignment output directory for AXT format files')
args = parser.parse_args()
       
def main():
    cfg = ParseConfig(args.configFile)
    # get temporary directory name
    tempDir = cfg.getTempDir()
    # get lastz program path
    lastzProg = cfg.getProgVar('alignProg')
    # get alignment parameter values, values chosen for 
    # aligning mRNAs to find retrogenes and parents
    coverage = cfg.getAlignVar('alignCoverage')
    identity = cfg.getAlignVar('alignIdentity')
 
    # Create an AXT output name and path in the temp dir
    # Remove path and file extension from query name
    queryPrefix = getFileNameNoExt(args.query)
    tempAxtOut = createPath(tempDir, queryPrefix + ".axt")
    # Create a temporary PSL output file name
    tempPslOut = createPath(tempDir, getFileNameNoExt(args.outPsl) + ".temp")
    
    with open(tempAxtOut, "w") as axtFh:
        # Run lastz using IUPAC codes are these appear in some sequences
        # and would cause errors if this option is not used
        subprocess.check_call([lastzProg, args.target, args.query, \
            "--ambiguous=iupac", "--hspthresh=2000", \
            "--format=axt"], stdout=axtFh)
    # Convert the AXT output to PSL format, chromosome lengths file 
    # and the trimmed mRNA lengths file are defined in the config file
    subprocess.check_call(["axtToPsl", tempAxtOut, cfg.chromFile, \
        cfg.getSeqVarFullPath('mrnaTrimLen'), tempPslOut])
    # Move the PSL file from the temp dir to the output PSL directory
    moveFile(tempPslOut, args.outPsl)
    # Make the axt output directory
    makeDir(args.axtOutDir)
    # Move the AXT file in the temp directory to the AXT file directory
    moveFile(tempAxtOut, args.axtOutDir)
 
main()
