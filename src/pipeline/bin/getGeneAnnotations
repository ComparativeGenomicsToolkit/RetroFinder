#!/hive/groups/gencode/local/bin/python

from __future__ import with_statement

import sys, os, subprocess
import argparse
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from commonOps import *
from ParseConfig import ParseConfig

parser = argparse.ArgumentParser(description='Program to get gene annotation for input to pslPseudo which predicts retrogenes')
parser.add_argument('configFile', metavar='configFile', type=str, help='config file of variables global to the pipeline')
args = parser.parse_args()
       
class GeneAnnot(object):
    def __init__(self, args):
        # Config file assignment, check it exists first, exits with an 
        # Exception error if it does not. 
        if fileExists(args.configFile):
            self.cfgFile = args.configFile
        # Read and parse config file
        self.cfg = ParseConfig(args.configFile)
        # Get UCSC assembly database from config file
        self.database = self.cfg.db
        # Get the pslPseudo annotations directory 
        self.pslPseudoAnnotDir = self.cfg.getRetroPredAnnotDir()

    def getGeneAnnot(self, geneset):
        """Gets the geneset annotations where geneset is the variable name in 
           the config file"""
        # Create the annotations directory
        makeDir(self.pslPseudoAnnotDir)
        # Get the geneset table name
        genesetTable = self.cfg.getRetroPredVar(geneset)
        # Get the name for the geneset annotations file and add in the 
        # geneset variable name to ensure file name uniqueness as if 
        # only 1 or 2 genesets available, these are repeated
        # pslPseudo requires three genesets as input
        genesetFile = self.cfg.getRetroPredGene,FullPath(geneset)
        # Get annotations from the database
        genesetQuery= "select name, chrom, strand, txStart, txEnd, cdsStart, \
            cdsEnd, exonCount, exonStarts, exonEnds from " + genesetTable \
            + " order by chrom, txStart, txEnd"
        with open(genesetFile, "w") as fh:
            queryDb(genesetQuery, self.database, fh) 
        return genesetFile 

geneAnnot = GeneAnnot(args)
# geneset1 annotations file
geneAnnot.getGeneAnnot('gene1')
# geneset2 annotations file
geneAnnot.getGeneAnnot('gene2')
# geneset3 annotations file
geneAnnot.getGeneAnnot('gene3')
