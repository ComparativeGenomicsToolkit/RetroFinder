#!/hive/groups/gencode/local/bin/python

from __future__ import with_statement

import sys, os, subprocess
import argparse
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from commonOps import *
from ParseConfig import ParseConfig

parser = argparse.ArgumentParser(description='Program to get repeat annotation for input to pslPseudo which predicts retrogenes')
parser.add_argument('configFile', metavar='configFile', type=str, help='full path of config file of variables global to the pipeline')
args = parser.parse_args()
       
class RepeatAnnot(object):
    def __init__(self, args):
        # Config file assignment, check it exists first, exits with an 
        # Exception error if it does not. 
        if fileExists(args.configFile):
            self.cfgFile = args.configFile
        # Read and parse config file
        self.cfg = ParseConfig(args.configFile)
        # Get UCSC assembly database from config file
        self.database = self.cfg.db
        # Get the pslPseudo annotations directory 
        self.pslPseudoAnnotDir = self.cfg.getRetroPredAnnotDir()
        # RepeatMasker annotations table
        self.rmskTable = self.cfg.getRetroPredVar('repeatMaskTable')
        # Simple Repeats (TRF output) annotations table
        self.simpleRepsTable = self.cfg.getRetroPredVar('trfTable')

    def getRepeatMaskAnnot(self):
        # Create the annotations directory
        makeDir(self.pslPseudoAnnotDir)
        # Get the name for the RepeatMasker annotations file
        rmskFile = self.cfg.getRetroPredRepeatsFullPath('repeatMaskTable')
        # Get annotations from the database
        rmskQuery= "select genoName, genoStart, genoEnd from " + self.rmskTable 
        with open(rmskFile, "w") as fh:
            queryDb(rmskQuery, self.database, fh) 
        return rmskFile 

    def getSimpleRepeatsAnnot(self):
        """Get Simple Repeats annotations found by Tandem Repeat Finder (TRF)"""
        # Create the annotations directory
        makeDir(self.pslPseudoAnnotDir)
        # Get the name for the Simple Repeats annotations file
        simpleRepsFile = self.cfg.getRetroPredRepeatsFullPath('trfTable')
        # Get annotations from the database
        simpleRepsQuery= "select chrom, chromStart, chromEnd from " \
            + self.simpleRepsTable
        # Get annotations from the database
        with open(simpleRepsFile, "w") as fh:
             queryDb(simpleRepsQuery, self.database, fh)
        return simpleRepsFile

rptAnnot = RepeatAnnot(args)
rptAnnot.getRepeatMaskAnnot()
rptAnnot.getSimpleRepeatsAnnot()
