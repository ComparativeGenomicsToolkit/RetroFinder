#!/hive/groups/gencode/local/bin/python

from __future__ import with_statement

import sys, os, subprocess
import argparse
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from commonOps import *
from ParseConfig import ParseConfig
from pycbio.sys.fileOps import *

parser = argparse.ArgumentParser(description='Program to run pslPseudo and pass the correct input parameters to the program, runs program on each PSL file on the cluster')
parser.add_argument('configFile', metavar='configFile', type=str, help='config file of variables global to the pipeline')
parser.add_argument('fileNum', metavar='fileNumber', type=str, help='Integer suffix for split PSL file and used for output files')
parser.add_argument('inputPslDir', metavar='inputPslDir', type=str, help='Directory of split PSL files')
parser.add_argument('resultDir', metavar='resultDir', type=str, help='Directory for retrogene/parent information (pseudoMrnaLink) output files')
parser.add_argument('outDir', metavar='outDir', type=str, help='Directory for output PSL files and break in orthology files')
parser.add_argument('logDir', metavar='logDir', type=str, help='Directory for log files')
args = parser.parse_args()
       
def main():
    # Check config file exists before trying to parse it, 
    # exits with an Exception error if it does not. 
    if fileExists(args.configFile):
        cfg = ParseConfig(args.configFile)
    # get temporary directory name and create that directory
    tempDir = tmpFileGet(prefix="retro")
    ensureDir(tempDir)

    # Get pslPseudo program path
    pslPseudoProg = createPath(cfg.getGenVar('progBinDir'), "pslPseudo")
    # Get pslPseudo options
    options = cfg.getRetroPredVar('pslPseudoOptions')
    cdsFileOption = "-cdsFile=" + cfg.getCdsFileFullPath('all')
    # Directory for annotations for input to pslPseudo
    annotsDir = cfg.getRetroPredAnnotDir() 
    # Genome 2bit file
    genomeTwoBit = cfg.getGenVar('genomeTwoBit')
    # Split directory PSL
    inputPsl = createPath(inputPslDir, "tmp" + args.fileNum + ".psl")
    # Output files
    outMrnaPsl = createPath(tempDir, "mrna" + args.fileNum + ".psl") 
    outPsl = createPath(tempDir, "pseudo" + args.fileNum + ".psl") 
    pseudoMrnaLink = createPath(tempDir, "pseudoMrnaLink" + args.fileNum + ".txt")
    pseudoMrnaLinkBed = createPath(tempDir, "pseudoMrnaLink" + args.fileNum + ".bed")
    pseudoAxt = createPath(tempDir, "pseudo" + args.fileNum + ".axt")
    orthoFile = createPath(tempDir, "orth" + args.fileNum + ".txt")
    logFile = createPath(tempDir, "pseudo" + args.fileNum + ".log")

    # pslPseudo options and inputs
    pslPseudoCmd = [pslPseudoProg, options, cdsFileOption, cfg.database, \
        inputPsl, cfg.chromfile, \
        cfg.getRetroPredRepeatFullPath('repeatMaskTable'), \
        cfg.getRetroPredNetFullPath('net1'), cfg.getRetroPredNetFullPath('net2'), \
        cfg.getRetorPredRepeatFullPath('trfTable'), cfg.getPslFileFullPath('all'), \
        outMrnaPsl, outPsl, pseudoMrnaLink, pseudoAxt, genomeTwoBit, \
        cfg.getSeqVarFullPath('allTwoBit'), cfg.getRetroPredGeneFullPath('gene2'), \
        cfg.getRetroPredGeneFullPath('gene3'), \
        cfg.getRetroPredGeneFullPath('gene1'), cfg.getRetroPredNetFullPath('net3'), \
        orthoFile]
    # Run pslPseudo and write verbose output to a log file. pslPseudo scores 
    # alignments using annotations and compile information for ucscRetroInfoXX table.
    with open(logFile, "w") as lFh:
        subprocess.check_call(pslPseudoCmd, stdout=lFh)
    
    # Select pseudogenes and expressed retrogenes from field 32:
    # field 32 is label: 1=pseudogene, -1 not pseudogene -2 expressed retrogene
    with open(pseudoMrnaLinkBed, "w") as fh:
        subprocess.check_call(["awk", "$32 == 1 || $32==-2 {print $0}", \
            pseudoMrnaLink], stdout=fh)
    # Move the output files to appropriate output directories        
    moveFile(logFile, args.logDir)
    moveFile(pseudoMrnaLinkBed, args.resultDir)
    moveFile(pseudoAxt, createPath(args.resultDir, "axt"))
    moveFile(outMrnaPsl, args.outDir)
    moveFile(outPsl, args.outDir)
    moveFile(orthoFile, args.outDir)

main()
