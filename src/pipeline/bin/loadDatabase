#!/hive/groups/gencode/local/bin/python

from __future__ import with_statement

import sys, os, subprocess
import argparse
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from commonOps import *
from ParseConfig import ParseConfig
from pycbio.sys.fileOps import *

parser = argparse.ArgumentParser(description='Program to get repeats and net alignment annotation data for input to pslPseudo which predicts retrogenes')
parser.add_argument('configFile', metavar='configFile', type=str, help='full path of config file of variables global to the pipeline')
args = parser.parse_args()
       
class loadDatabase(object):
    def __init__(self, args):
        # Config file assignment, check it exists first, exits with an 
        # Exception error if it does not. 
        if fileExists(args.configFile):
            self.cfgFile = args.configFile
        # Read and parse config file
        self.cfgParse = ParseConfig(args.configFile)
        # Get UCSC assembly database from config file
        self.database = self.cfgParse.db
        self.version = self.cfgParse.getGenVar('version')
 
    def loadTable(self, table, sqlFile, tabFile):
        """Load database table"""
        loadTbl = ["hgLoadSqlTab", self.database, table, sqlFile, tabFile]
        subprocess.check_call(loadTbl)

    def loadSequences(self, seqFile):
        """Loads sequence file information into Seq and ExtFile tables and 
           adds the sequence files to a directory in /gbdb/<database>/"""
        gbdbFile = self.linkSeqFilesToGbdb(seqFile)
        self.loadSeqTable(gbdbFile)

    def loadSeqTable(self, file):
        """Loads the Seq and ExtFile tables"""
        seqTbl = "-seqTbl=ucscRetroSeq" + self.version
        extTbl = "-extFileTbl=ucscRetroExtFile" + self.version
        loadSeq = ["hgLoadSeq", "-replace", seqTbl, extTbl, self.database, file]
        subprocess.check_call(loadSeq)

    def linkSeqFileToGbdb(self, seqFile):
        """Copies sequence data file to the genomes bed directory and
           symlinks it to gbdb. Returns the path to the file"""
        # seqFile is the sequence file with full path
        # Add version to the gbdb sequences directory name
        gbdb = createPath("/gbdb", self.database)
        gbdbDir=createPath(gbdb,  \
            self.cfgFile.getSeqVar('gbdbSeqDir') + self.version
        # sequences file with no path
        sFileName = getFileNameFromPath(seqFile) 
        # Symlink sequence file here
        gbdbFile = createPath(gbdbDir, sFileName)
        subprocess.check_call(["ln", "-s", seqFile, gbdbFile]) 

   def loadPslAli(self, pslFile):
       """Loads the PSL alignment file for retrogene predictions. """
       tableName="-table=ucscRetroAli" + self.version
       subprocess.check_call("hgLoadPsl", tableName, self.database, pslFile)

   def loadRetroInfo(self, infoFile):
       """Loads the ucscRetroInfo file that includes the retrogene alignment
          and additional information such as overlapping genes."""
       infoTable = "ucscRetroInfo" + self.version
       # NOTE: Define infoTableName
       infoSql = "-sqlTable" + infoTableName
       subprocess.check_call(["hgLoadBed", self.database, infoTable \
           "-verbose=9", "-renameSqlTable", "-allowNegativeScores", \
           "-noBin", infoSql)
           
   def loadExpTable(self, expFile):
       """Loads table of expressed retrogenes with CDS annotation using
          genePred format."""
       tableName = "ucscRetroExpressed" + self.version
       # NOTE: ADD CODE FOR PSEUDOEXP LOCATION, ADD FULL PATH
       pseudoExp = "pseudoExpressed.gp"
       subprocess.check_call(["ldHgGene", self.database, tableName, \
           pseudoExp, "-genePredExt", "-predTab"])

   def createCountTable(self):
       """Table is created from other tables so should be created last. 
          It lists parent gene symbols with more than one retrogene and 
          provides a retrogene count for each parent in ascending order 
          of the count."""
       table = "ucscRetroCount" + self.version
       infoTable = "ucscRetroInfo" + self.version
       countQuery = "create table " + table + " select geneSymbol, count(*) \ 
           as retroCount, avg(score), as averageScore from " + infoTable \
           + ", kgXref where kgName = kgID and kgName <> 'noKg' and \
           score > 650  group by geneSymbol having count(*) > 1 order by 2 desc"       queryDb(countQuery, self.database) 
