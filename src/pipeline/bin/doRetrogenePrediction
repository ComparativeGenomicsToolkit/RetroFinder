#!/hive/groups/gencode/local/bin/python

from __future__ import with_statement

import sys, os, subprocess
import re
import argparse
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from commonOps import *
from ParseConfig import ParseConfig
from Cluster import ClusterJobs
from pycbio.sys.fileOps import *

parser = argparse.ArgumentParser(description='Program to run pslPseudo which predicts retrogenes and is the core program of RetroFinder')
parser.add_argument('configFile', metavar='configFile', type=str, help='full path of config file of variables global to the pipeline')
args = parser.parse_args()
       
class RetroGenePred():
    def __init__(self, args):
        # Config file assignment, check it exists first, exits with an 
        # Exception error if it does not. 
        if fileExists(args.configFile):
            self.cfgFile = args.configFile
        self.cfg = ParseConfig(self.cfgFile)
        # Get the pslPseudo annotations directory
        self.pslPseudoAnnotDir = self.cfg.getRetroPredAnnotDir()
        # Creates the run and output directories for pslPseudo, returns
        # directory names in a tuple (run, result, result/axt, log, out)
        self.pslPseudoDirs = self.__createPslPseudoDirs()
        # Lastz mRNA alignments in PSL format
        self.lastzMrnaPsl = self.cfg.getAlignFileFullPath('lastzPsl')
        # Rewrite lastz PSL with unique query names by adding -1,-2 etc.
        self.uniqQueryNamePsl = self.__uniqQueryNames()
        # Directory of split PSLs, PSLs are split
        self.splitPslDir = self.__splitPsl()
        # List of PSL numbers for files in split directory
        self.pslNumList = self.__getPslNumList()
       
    def __createPslPseudoDirs(self):
        """Creates the directories for inputs and outputs to pslPseudo."""
        runDir = createPath(self.pslPseudoAnnotDir, "run")
        resultDir = createPath(self.pslPseudoAnnotDir, "result")
        axtDir = createPath(self.pslPseudoAnnotDir, "result/axt")
        logDir = createPath(self.pslPseudoAnnotDir, "log")
        outDir = createPath(self.pslPseudoAnnotDir, "out")
        # Creates directories and all subdirectories in path
        ensureDir(runDir)
        ensureDir(axtDir)    
        ensureDir(logDir)    
        ensureDir(outDir)
        return (runDir, resultDir, axtDir, logDir, outDir)

    def __uniqQueryNames(self):
        """Create unique qNames by adding -1,-2 as suffixes. 
           Assumes the PSL file is sorted by qName"""
        uniqQueryNamePsl = self.lastzMrnaPsl + ".uniq.psl"
        # Add path to script to make unique qNames
        qNameUniq = createPath(self.cfg.getGenVar('scriptDir'), "pslQNameUniq") 
        with open(uniqQueryNamePsl, "w") as fh:
            subprocess.check_call([qNameUniq, self.lastzMrnaPsl], \
                stdout=fh)
        return uniqQueryNamePsl

    def __splitPsl(self):
        """Splits the PSL into smaller files. Since qNames are already 
           unique, then change the chunkSize to xx. This determines the 
           maximum number of unique qNames per file."""
        # Create directory for split PSL files
        splitDir = createPath(self.pslPseudoAnnotDir, "pslSplit")
        ensureDir(splitDir)
        pslSplitProg = createPath(self.cfg.getGenVar('progBinDir'), "pslSplit")
        subprocess.check_call([pslSplitProg, "nohead", splitDir, \
            self.uniqQueryNamePsl, "-chunkSize=10000"])
        return splitDir

    def __getPslNumList(self):
        """Get list of PSL file numbers from the split PSL directory. 
           Each file has a number e.g. tmp102.psl is 102."""
        pslList = makeFileList(self.splitPslDir, "psl")
        pslNumListFile = createPath(self.pslPseudoDirs[0], "list")
        nFh = open(pslNumListFile, "w")
        for f in pslList: 
            # get just the file name without the extension 
            fileName = getFileNameNoExt(f) 
            # Then remove the "tmp" suffix and write the number to a file
            i = re.match(r'^tmp(\d+)', fileName)
            if i: 
                nFh.write(i.group(1) + "\n")
        nFh.close()
        return pslNumListFile

    def createRetroPredJobListAndRun(self):
        """Creates the job list to call the script that runs pslPseudo to do 
           the retrogene scoring and collect information associated with 
           retrogene predictions"""
        # Create ClusterJobs object to hold information about the cluster run
        # passing in config file, run directory, template and the lists to use
        # for substitution. There is only one list so single is the second 
        # list parameter.
        clusterJobs = ClusterJobs(self.cfg, self.pslPseudoDirs[0], \
            self.__templateText(), self.pslNumList, "single")
        # Create job list and run
        clusterJobs.runJobs()
  
    def __templateText(self):
        """Returns main string for template"""
        runPslPseudo = createPath(self.cfg.getGenVar('scriptDir'), \
            "runPslPseudo")
        pseudoGeneLink = createPath(self.pslPseudoDirs[1], \
            "pseudoGeneLink$(path1).bed")
        templateStr = runPslPseudo + " " + self.cfgFile + " $(path1) " \
            + self.splitPslDir + " " + self.pslPseudoDirs[1] + " " \
            + self.pslPseudoDirs[4] + " " + self.pslPseudoDirs[3] \
            + "{check out exists " + pseudoGeneLink + " }"
        
        return templateStr
  
retroPred = RetroGenePred(args)
retroPred.createRetroPredJobListAndRun()  
