#!/usr/bin/env python

from __future__ import with_statement

import sys, os, subprocess
import re
import argparse
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from Files import *
from commonOps import *
from SeqAndAlignData import SeqAndAlignData

getGenbankSeqProg = "/cluster/data/genbank/bin/x86_64/gbGetSeqs"
gbRoot = "/cluster/data/genbank"

parser = argparse.ArgumentParser(description='Program to get sequence and associated data for RetroFinder')
parser.add_argument('db', metavar='database', type=str, help='genome assembly database')
parser.add_argument('outDir', metavar='outDir', type=str, help='root of output director')
parser.add_argument('--ensVer', dest='ensVersion', action='store_const', const=ensVer, default=None, help='if using Ensembl, provide the version to check this is the one used in the database')
args = parser.parse_args()
       
class GetSequenceData(object):
    def __init__(self, args):
        # set variables for options
        self.database = args.db
        # date in format, YYYY-MM-DD
        self.date = getDate()
        self.outDir = args.outDir
        # NOTE: MOVE ROOT DIR TO HIGHER UP PROGRAM
        self.rootDir = createRootDirName(self.outDir, self.database, self.date)
        print "Root name is", self.rootDir
        # Create SeqFiles objects for GenBank and RefSeq:
        genbankFiles = SeqFiles(self.rootDir, self.database, "mrna")
        # Can not pass a files object as this is a program so for now 
        # make that object again in getGenbankData
        print "Calling getGenbankData"
        makeDir(genbankFiles.seqsDir)
        subprocess.check_call(["./getGenbankData", self.database, self.rootDir])

getSeqsData = GetSequenceData(args)
