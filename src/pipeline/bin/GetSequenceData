#!/usr/bin/env python

from __future__ import with_statement

import sys, os, subprocess
import re
import argparse
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from Files import *
from commonOps import *
from SeqAndAlignData import SeqAndAlignData

getGenbankSeqProg = "/cluster/data/genbank/bin/x86_64/gbGetSeqs"
gbRoot = "/cluster/data/genbank"

parser = argparse.ArgumentParser(description='Program to get sequence and associated data for RetroFinder')
parser.add_argument('db', metavar='database', type=str, help='genome assembly database')
parser.add_argument('outDir', metavar='outDir', type=str, help='root of output director')
#parser.add_argument('--ensVer', dest='ensVersion', action='store', type=int, help='if Ensembl data required, provide the version to check this is the one used in the database')
parser.add_argument('--ensDb', dest='ensDatabase', action='store', type=str, help='if Ensembl data required, provide the version to check this is the one used in the database')
args = parser.parse_args()
       
class GetSequenceData(object):
    def __init__(self, args):
        # set variables for options
        # UCSC genome assembly database
        self.database = args.db
        # Ensembl genome assembly database
        if args.ensDatabase != None:
            self.ensDb = args.ensDatabase
        # date in format, YYYY-MM-DD
        self.date = getDate()
        self.outDir = args.outDir
        # NOTE: MOVE ROOT DIR TO HIGHER UP PROGRAM
        self.rootDir = createRootDirName(self.outDir, self.database, self.date)
        # Get a list of general files
        self.generalFiles = GeneralFiles(self.rootDir)
        # Get chromosome sizes
        self.getChromSizes()
        # Create SeqFiles objects for GenBank and RefSeq:
        self.genbankFiles = SeqFiles(self.rootDir, self.database, "mrna")
        # Can not pass a files object as this is a program so for now 
        # make that object again ingetGenbankData
        if args.ensDb != None:
            # Get Ensembl sequences and data
            subprocess.check_call(["./getEnsemblData", self.database, self.ensDb, self.generalFiles.chromFile, self.rootDir])
        else:
            print "Ensembl verison option is not set."
        # Get Genbank mRNA sequences and associated data
        subprocess.check_call(["./getGenbankData", self.database, self.rootDir])
        # Get RefSeq mRNA transcript sequences and associated data
        subprocess.check_call(["./getRefseqData", self.database, self.rootDir])
 
    def getChromSizes(self):
        """Get chromosome sizes"""
        print "Getting chrom sizes"
        makeDir(self.rootDir)
        chromStr = "select chrom, size from chromInfo;"
        with open(self.generalFiles.chromFile, "w") as fh:
            subprocess.check_call(["hgsql", "-Ne", chromStr, self.database], stdout=fh)

    def getCurrentDbEnsemblVersion(self):
        """Gets the current Ensembl version loaded into the database"""
        queryStr = "select max(version) from trackVersion where db = " + "'" \
            + self.database + "';"
        print queryStr
        ensRel = subprocess.check_output(['hgsql', '-Ne', queryStr, 'hgFixed'])
        print "Ensembl release is %s here." % (ensRel[0:-1])
        # Ensembl release value is a string so cast to an integer
        return int(ensRel[0:-1])
    
    def checkEnsemblVersion(self, ensVerOption):
        """Checks the current UCSC database Ensembl version against the 
           current one at Ensembl from which sequences were retrieved."""
        # NOTE: later write program to check the version being used at
        # Ensembl or could check UCSC first then connect to correct archive. 
        # For now fail if versions are not the same: 
        if self.ensVer != ensVerOption:
            raise AssertionError, "Ensembl version in database does not match that provided by user"
        print "Ensembl versions match"

getSeqsData = GetSequenceData(args)
print "Organism name is %s here" % (getOrganismName(getSeqsData.database))
