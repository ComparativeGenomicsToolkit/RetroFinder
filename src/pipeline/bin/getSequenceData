#!/usr/bin/env python

from __future__ import with_statement

import sys, os, subprocess
import re
import argparse
myBinDir = os.path.normpath(os.path.dirname(sys.argv[0]))
sys.path.append(myBinDir + "/../lib")
from Files import *
from commonOps import *
from ParseConfig import ParseConfig
from SeqAndAlignData import SeqAndAlignData

getGenbankSeqProg = "/cluster/data/genbank/bin/x86_64/gbGetSeqs"
gbRoot = "/cluster/data/genbank"

parser = argparse.ArgumentParser(description='Program to get sequence and associated data for RetroFinder')
parser.add_argument('db', metavar='database', type=str, help='genome assembly database')
parser.add_argument('configFile', metavar='configFile', type=str, help='config file of variables global to the pipeline')
parser.add_argument('--ensDb', dest='ensDatabase', action='store', type=str, help='if Ensembl data required, provide the Ensembl database name')
args = parser.parse_args()
       
class getSequenceData(object):
    def __init__(self, args):
        # set variables for options
        # UCSC genome assembly database
        self.database = args.db
        # Ensembl genome assembly database
        self.ensDb = args.ensDatabase
        # Read and parse config file
        self.cfgParse = ParseConfig(self.database, args.configFile)
        # Get the root run directory
        self.rootDir = self.cfgParse.rootRunDir
        # Get the sequences working directory from config file 
        self.seqDir = self.cfgParse.getVar('SequenceData', 'seqDir')
        # Get a list of general files
        # self.generalFiles = GeneralFiles(self.rootDir)
        # Get chromosome sizes
        self.chromFile = self.getChromSizes()
        # Create SeqFiles objects for GenBank and RefSeq:
    #    self.genbankFiles = SeqFiles(self.rootDir, self.database, "mrna")
        # Can not pass a files object as this is a program so for now 
        # make that object again in getGenbankData
        if self.ensDb != None:
            # Get Ensembl sequences and data
            self.getEnsSeqData('ensemblData')
        else:
            print "Ensembl version option is not set."
        # Get Genbank mRNA sequences and associated data
        # self.getMrnaSeqData('genbankData')
        # Get RefSeq mRNA transcript sequences and associated data
        self.getMrnaSeqData('refseqData')
 
    def getChromSizes(self):
        """Get chromosome sizes"""
        print "Getting chrom sizes"
        makeDir(self.rootDir)
        chromStr = "select chrom, size from chromInfo;"
        with open(self.cfgParse.chromFile, "w") as fh:
            subprocess.check_call(["hgsql", "-Ne", chromStr, self.database], stdout=fh)

    def catSeqAndAlignDataFiles(self):
        """Cats together the FASTA, CDS and PSL files created"""
        allPrefix = self.cfgParse.getVar('SequenceData', 'allSeqs')
        faList = makeFileList(self.seqDir, "fa")
        catFiles(self.cfgParse.getSeqFile(allPrefix), faList)
        pslList = makeFileList(self.seqDir, "psl")
        catFiles(self.cfgParse.getPslFile(allPrefix), pslList)
        cdsList = makeFileList(self.seqDir, "cds")
        catFiles(self.cfgParse.getCdsFile(allPrefix), cdsList)

    def getMrnaSeqData(self, seqProg):
        """Gets Genbank or RefSeq mRNA sequences and related data""" 
        getSeqProg = self.cfgParse.getVar('Programs', seqProg)
        subprocess.check_call([getSeqProg, self.database, self.rootDir])
        
    def getEnsSeqData(self, seqProg)
        """Gets Ensembl mRNA sequences and related data"""
        getEnsSeqProg = self.cfgParse.getVar('Programs', seqProg)
        subprocess.check_call([getEnsSeqProg, self.database, self.ensDb, \
            self.chromFile, self.rootDir)]

    def getCurrentDbEnsemblVersion(self):
        """Gets the current Ensembl version loaded into the database"""
        queryStr = "select max(version) from trackVersion where db = " + "'" \
            + self.database + "';"
        print queryStr
        ensRel = subprocess.check_output(['hgsql', '-Ne', queryStr, 'hgFixed'])
        print "Ensembl release is %s here." % (ensRel[0:-1])
        # Ensembl release value is a string so cast to an integer
        return int(ensRel[0:-1])
    
    def checkEnsemblVersion(self, ensVerOption):
        """Checks the current UCSC database Ensembl version against the 
           current one at Ensembl from which sequences were retrieved."""
        # NOTE: later write program to check the version being used at
        # Ensembl or could check UCSC first then connect to correct archive. 
        # For now fail if versions are not the same: 
        if self.ensVer != ensVerOption:
            raise AssertionError, "Ensembl version in database does not match that provided by user"
        print "Ensembl versions match"

getSeqsData = getSequenceData(args)
getSeqsData.catSeqAndAlignDataFiles()
print "Organism name is %s here" % (getOrganismName(getSeqsData.database))
